1.springboot访问静态资源设置：
public void addResourceHandlers(ResourceHandlerRegistry registry) {
        registry.addResourceHandler("/static/**").addResourceLocations("classpath:/static/");
		//将对ip:8080/icon的访问，转成访问根目录下的icon，file:./icon/ 中,file表示当前盘符，./icon表示根目录,最后的/不能少
        registry.addResourceHandler("/icon/**").addResourceLocations("file:./icon/");      

        registry.addResourceHandler("swagger-ui.html")
                .addResourceLocations("classpath:/META-INF/resources/");
    }
	
**************************************************************************************************

2.基于SchedulingConfigurer的任务调度
https://blog.csdn.net/G0_hw/article/details/94877687

Spring 中，创建定时任务除了使用@Scheduled 注解外，还可以使用 SchedulingConfigurer。既然两者都可以实现定时任务，那有什么不同呢？
@Schedule注解的一个缺点就是其定时时间不能动态更改，它适用于具有固定任务周期的任务，若要修改任务执行周期，只能走“停服务→修改任务执行周期→重启服务”这条路。
而基于 SchedulingConfigurer 接口方式可以做到。SchedulingConfigurer 接口可以实现在@Configuration 类上，同时不要忘了，还需要@EnableScheduling 注解的支持。

**************************************************************************************************

3.基础接口类

SpringBoot 的应用中包含两个关键组件：ApplicationContextInitializer 和 ApplicationListener ，分别是初始化器和监听器，它们都在构建 SpringApplication 时注册

ApplicationContextInitializer
6个 ApplicationContextInitializer，对这些Initializer作简单介绍：
ConfigurationWarningsApplicationContextInitializer：报告IOC容器的一些常见的错误配置
ContextIdApplicationContextInitializer：设置Spring应用上下文的ID
DelegatingApplicationContextInitializer：加载 application.properties 中 context.initializer.classes 配置的类
ServerPortInfoApplicationContextInitializer：将内置servlet容器实际使用的监听端口写入到 Environment 环境属性中
SharedMetadataReaderFactoryContextInitializer：创建一个 SpringBoot 和 ConfigurationClassPostProcessor 共用的 CachingMetadataReaderFactory 对象
ConditionEvaluationReportLoggingListener：将 ConditionEvaluationReport 写入日志

ApplicationListener 
基于观察者模式的标准 java.util.EventListener 接口
ClearCachesApplicationListener：应用上下文加载完成后对缓存做清除工作
ParentContextCloserApplicationListener：监听双亲应用上下文的关闭事件并往自己的子应用上下文中传播
FileEncodingApplicationListener：检测系统文件编码与应用环境编码是否一致，如果系统文件编码和应用环境的编码不同则终止应用启动
AnsiOutputApplicationListener：根据 spring.output.ansi.enabled 参数配置 AnsiOutput
ConfigFileApplicationListener：从常见的那些约定的位置读取配置文件
DelegatingApplicationListener：监听到事件后转发给 application.properties 中配置的 context.listener.classes 的监听器
ClasspathLoggingApplicationListener：对环境就绪事件 ApplicationEnvironmentPreparedEvent 和应用失败事件 ApplicationFailedEvent 做出响应
LoggingApplicationListener：配置 LoggingSystem。使用 logging.config 环境变量指定的配置或者缺省配置
LiquibaseServiceLocatorApplicationListener：使用一个可以和 SpringBoot 可执行jar包配合工作的版本替换 LiquibaseServiceLocator
BackgroundPreinitializer：使用一个后台线程尽早触发一些耗时的初始化任务

SpringApplicationRunListeners 
Environment与ConfigurableEnvironment





