work模式
1.一个生产者，一至多个消费者，都声明同一个队列

2.channel.basicQos(1)：
表示同一时刻服务器只会发一条消息给消费者，来限制RabbitMQ只发不超过1条的消息给同一个消费者。当消息处理完毕后，有了反馈，才会进行第二次发送。

3.channel.basicAck(envelope.getDeliveryTag(), false)：
返回确认状态，注释掉表示使用自动确认模式

4.channel.basicConsume(QUEUE_NAME,false, new DefaultConsumer(channel)):
false表示手动模式，与上一条配合使用；true表示自动模式

5.模式：
模式1：自动确认
只要消息从队列中获取，无论消费者获取到消息后是否成功消息，都认为是消息已经成功消费。
模式2：手动确认
消费者从队列中获取消息后，服务器会将该消息标记为不可用状态，等待消费者的反馈，如果消费者一直没有反馈，那么该消息将一直处于不可用状态。

6.同时设置channel.basicQos(1)，并设置手动模式时，为能者多劳,其他情况下为公平模式，每个消费者获取的消息数量相同


交换机类型:
fanout:订阅模式
direct：路由模式
topic：主题模式（通配符模式）

订阅模式

解读：
1、1个生产者，多个消费者
2、每一个消费者都有自己的一个队列
3、生产者没有将消息直接发送到队列，而是发送到了交换机
4、每个队列都要绑定到交换机
5、生产者发送的消息，经过交换机，到达队列，实现，一个消息被多个消费者获取的目的
注意：一个消费者队列可以有多个消费者实例，只有其中一个消费者实例会消费
注意：消息发送到没有队列绑定的交换机时，消息将丢失，因为，交换机没有存储消息的能力，消息只能存在在队列中。

由生产者创建交换机，消费者创建队列及将队列绑定到交换机上
生产者：channel.exchangeDeclare(EXCHANGE_NAME,"fanout");
消费者：
channel.queueDeclare(QUEUE_NAME,false,false,false,null);
channel.queueBind(QUEUE_NAME,EXCHANGE_NAME,"");

如果设置为channel.basicQos(1),消息处理速度会慢很多


路由模式
生产者：
channel.exchangeDeclare(EXCHANGE_NAME,"direct");指定交换机类型为direct
channel.basicPublish(EXCHANGE_NAME,"delete",null,(message+i).getBytes());//第二个参数为消息键

消费者：
channel.queueBind(QUEUE_NAME,EXCHANGE_NAME,"delete");第三个参数为消息建，与生产者对应
channel.queueBind(QUEUE_NAME,EXCHANGE_NAME,"update");
channel.queueBind(QUEUE_NAME,EXCHANGE_NAME,"insert");

只有消费者指定了消息建后，才能收到生产者发送的带有指定消息建的消息(消息匹配)，是订阅模式的特殊中的一种，订阅模式不指定消息建，所有消息都接受


主题模式（通配符模式）

topic-exchange：将路由键和某模式匹配，符号"#"表示一致多个词，"*"表示一个词，audit.#能匹配audit.zz.aa,audit.*匹配audit.zz
注意：同一个消息被多个消费者获取。一个消费者队列可以有多个消费者实例，只有其中一个消费者实例会消费到消息

生产者：
channel.basicPublish(EXCHANGE_NAME,"all.de",null,(message+i).getBytes());

消费者：
channel.queueBind(QUEUE_NAME,EXCHANGE_NAME,"all.*");



持久化：将交换机或队列的数据保存到磁盘，服务器宕机或重启之后依然存在。
非持久化：将交换机或队列的数据保存到内存，服务器宕机或重启之后将不存在。
非持久化的性能高于持久化。
如何选择持久化？非持久化？ – 看需求。


work模式(不创建交换机)：
每个消费者获取的消息都不同，在手动模式下可以实现能者多劳模式，在自动模式下，可以实现平均模式

需要创建交换机：
fanout:订阅模式
是一种广播模式或者订阅模式，给Fanout交换机发送消息，绑定了这个交换机的所有队列都收到这个消息

direct：路由模式
只有绑定了指定路由键的消费者才能消费消息，消费者可以绑定多个路由键

topic：主题模式（通配符模式）
和路由模式类似，匹配有相似路由键的消息

************************************************************************************************

2.消息设置过期时间ttl
 对队列设置过期:在声明队列是添加参数:
  Map<String, Object> argss = new HashMap<String , Object>();
  argss.put("x-message-ttl" , 30*1000);//设置队列里消息的ttl的时间30s
  channel.queueDeclare(queueName1, true, false, false, argss);

 对每条消息设置过期时间,对每条消息的属性设置expiration:
 AMQP.BasicProperties.Builder builder = new AMQP.BasicProperties.Builder();
 builder.deliveryMode(2); //DeliveryMode等于2就说明这个消息是persistent的。1是默认，不是持久的。
 builder.expiration("30000");