
-- 将id列设置为主键
ALTER TABLE index_demo ADD PRIMARY KEY(id) ;

-- 将id列设置为自增
ALTER TABLE index_demo MODIFY id INT auto_increment;  

-- 给projectfile表中的fileuploadercode创建索引
ALTER TABLE projectfile ADD UNIQUE INDEX (fileuploadercode);

--索引的删除
alter table projectfile drop index s2123;
drop index fileuploadercode1 on projectfile;

--索引查看
show index from table_name

--重建索引
REPAIR TABLE `table_name` QUICK;

***************************************************************************************************************
MySQL中索引的存储类型有两种：BTREE和HASH

MySQL的BTREE索引和HASH索引
为什么要用索引？
使用索引后减少了存储引擎需要扫描的数据量，加快查询速度
索引可以把随机I/O变为顺序I/O
索引可以帮助我们对所搜结果进行排序以避免使用磁盘临时表
Mysql支持的索引类型：B-TREE索引与HASH索引

B-TREE索引
B-TREE索引的特点
B-TREEB-TREE以B+树结构存储数据，大大加快了数据的查询速度
B-TREE索引在范围查找的SQL语句中更加适合（顺序存储）
 
B-TREE索引使用场景
全值匹配的查询SQL，如 where act_id= '1111_act'
联合索引汇中匹配到最左前缀查询，如联合索引 KEY idx_actid_name(act_id,act_name) USING BTREE，只要条件中使用到了联合索引的第一列，就会用到该索引，但如果查询使用到的是联合索引的第二列act_name，该SQL则便无法使用到该联合索引（注：覆盖索引除外）
匹配模糊查询的前匹配，如where act_name like '11_act%'
匹配范围值的SQL查询，如where act_date > '9865123547215'（not in和<>无法使用索引）
覆盖索引的SQL查询，就是说select出来的字段都建立了索引
 
HASH索引
HASH的特点
Hash索引基于Hash表实现，只有查询条件精确匹配Hash索引中的所有列才会用到hash索引
存储引擎会为Hash索引中的每一列都计算hash码，Hash索引中存储的即hash码，所以每次读取都会进行两次查询
Hash索引无法用于排序
Hash不适用于区分度小的列上，如性别字段
