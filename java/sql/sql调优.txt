一、如何调优

1.索引

  索引是数据库调优最根本的优化方法，索引占据一定的空间，而且索引也会降低插入，更新，删除的速度，索引应该只创建必要的索引，一般在检索时用的字段创建索引。
  索引会造成存储碎片的问题，使用重建索引解决。
  
  
2.使用预编译查询

  程序通常根据用户的输入来动态执行SQL语句，这时应该尽量使用参数化SQL，这样不仅可以避免SQL注入漏洞攻击，最重要的是数据库会对这些参数化SQL执行预编译。这样第一次执行时DBMS会为这个SQL进行查询优化并且执行预编译，以后执行这个SQL时就直接使用预编译的结果，提高执行速度。
 
 
3.调整WHERE字句中的连接顺序

  DBMS一般采用自下而上的顺序解析WHERE字句，所以表连接最好写在其他WHERE条件之前，那样就可以过滤掉最大数量记录。
  

4.SELECT语句中避免使用*

  SELECT * 比较简单，但除非确实需要检索所有的列，否则会增加网路的负载和服务器的资源消耗，DBMS在解析的过程中，把*依次转换成所有的列名，意味着耗费更多的时间。
  
 
5.尽量将多条SQL压缩到一句的SQL中

  每次执行SQL的时候都要建立网路连接、进行权限校验、进行SQL语句的查询优化、发送执行结果，这个过程是非常耗时的，因此尽量避免过多的执行SQL语句，能够压缩到一句的SQL执行语句就不要多条执行
  
 
6.用WHERE字句替换HAVING字句

  要避免使用HAVING字句，因为HAVING只会检索出所有记录之后才对结果进行过滤。HAVING中的条件一般用于聚合函数的过滤，除此之外应该条件写在WHERE字句中。
  
  
7.使用表的别名

  当在SQL语句中连接多个表时，使用表的别名并把别名前缀置于每个列名上，这样可以减少解析的时间并减少那些由列名歧义引起的语法错误。
  
 
8.使用EXISTS代替IN

  在查询中，为了满足一个条件，往往需要对另一个表进行连接，在这种情况下使用EXISTS而不是使用IN，通常会将提高查询效率，因为IN字句将执行一个子查询内部的排序和合并
  
  
9.避免在索引列上使用计算

  在where子句中，若果索引列是计算或者函数的一部分，DBMS的优化器将不会使用索引而使用全表扫描。
  
  
10.用UNION ALL代替UNION

  当SQL语句需要UNION两个查询结果集合时，即使索引结果中不会有重复记录，使用UNION这两个结果集同样会尝试进行合并，然后在输出最终结果前进行排序。因此检索结果中不会有重复记录的话，应该用UNION ALL，这样效率会得到提高。
  
  
11.避免使用隐式类型造成的全表扫描

  由于大部分数据库的隐式转换类型中数值类型的优先高于字符串类型，因此DBMS将会对level字段(实际类型是字符串)进行隐式转换，相当于执行了SELECT LEVEL FROM A WHERE TO_INT(LEVEL)=6,由于该索引进行了计算，造成索引失效二使用全表扫描。
  
  
12.防止检索范围过宽

  如果DBMS优化器认为检索范围过宽，那么它将放弃索引查找二使用全表扫描，下面是可能造成检索范围过宽的情况：
  
     使用IS NOT NULL或者不等于判断，可能照成优化器假设匹配的记录太多
	 
	 使用like的时候，“a%”将会使用索引，而“a%c”和“%c” 则会使用全表扫描
	 
	 
13.导致全表扫描的查询

   对查询进行优化，尽量避免全表扫描，首先应考虑在where及ORDER BY 涉及的列上建立索引。

  应尽量避免在where字句中对字段进行null值判断，尽量给字段设置默认值。
