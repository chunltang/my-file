容器迁移：
https://blog.csdn.net/xyz_dream/article/details/75019982
最好不要使用export/import迁移容器，容易出现异常

***********************************************************************************************************************************************************
导入容器时出现权限不足:
需要关闭selinux
chown: changing ownership of '.': Permission denied
临时关闭
setenforce 0 
永久关闭：
vim /etc/sysconfig/selinux  SELINUX=enforcing 改为 SELINUX=disabled
在运行容器的时候，给容器加特权，及加上 --privileged=true 参数。使用该参数，容器内的root拥有真正的root权限.否则，容器内的root只是外部的一个普通用户权限

***********************************************************************************************************************************************************

sshpass使用:
https://www.cnblogs.com/misswangxing/p/10637718.html
使用sshpass远程拉取文件:
1.yum -y install sshpass
apt-get  install sshpass

2.# vim /etc/ssh/ssh_config   
StrictHostKeyChecking no

3.# vim /etc/ssh/sshd_config  
GSSAPIAuthentication no
UseDNS no

4.service sshd restart

使用scp远程拉取文件
5.sshpass -p 'gitlab' scp root@192.168.2.100:/home/gitlabserver/Gms/GmsDispatchServer/test.txt test.txt

远程执行命令
sshpass -p 'gitlab' ssh root@192.168.2.100 "ls -l"
远程备份数据
ssh -t 指定putty交互
sshpass -p 'gitlab' ssh -t root@$1 "docker exec -it 8c459c071087  mysqldump -uroot -p123456  --default-character-set=utf8 -A > /gms-files/backups/mysql/all.sql"
sshpass -p 'gitlab' scp root@$1:/gms-files/backups/mysql/all.sql /gms-files/backups/mysql/all.sql
sshpass -p 'gitlab' scp root@$1:/gms-files/backups/redis/appendonly.aof /gms-files/backups/redis/appendonly.aof

***********************************************************************************************************************************************************

/gms-files/data 
为所有容器的数据挂载目录，包括： 
/data/mysql
/data/redis
/data/rabbitmq

所有服务文件：
/gms-files
/gms-files/business-service
/gms-files/communication-service
/gms-files/dispatch-service
/gms-files/map-service
/gms-files/gms-docker-images

ip对应：
gms-rabbitmq:172.18.0.2
gms-redis:172.18.0.3
gms-mysql:172.18.0.4
gms-business:172.18.0.5
gms-dispatch:172.18.0.6
gms-map:172.18.0.7
gms-communication:172.18.0.8
gms-web:172.18.0.10

容器迁移步骤：
1.停止正在运行的容器
docker stop c95dc9714519
2.将容器保存为镜像
docker commit -a "tcl" -m "rabbit容器"  c95dc9714519 gms-rabbitmq:3.8.2
3.导出镜像
docker save gms-rabbitmq:3.8.2 -o gms-rabbitmq:3.8.2.tar
4.导入镜像
docker load -i gms-rabbitmq:3.8.2.tar
5.创建网络
docker network create --subnet=172.18.0.0/16 gms-network
6.创建容器
rabbitmq创建：
docker run -it --privileged=true --name=gms-rabbitmq --net gms-network --ip 172.18.0.2 -p 5672:5672 -p 15672:15672 --restart=always  -v /gms-files/data/rabbitmq:/var/lib/rabbitmq -d  gms-rabbitmq:3.8.2

redis创建:
docker run -it --privileged=true --name=gms-redis -p 6379:6379 --restart=always  -v /gms-files/data/redis:/data -d  --net gms-network --ip 172.18.0.3 gms-redis:3.2 redis-server --appendonly yes

mysql创建：
docker run -it --privileged=true --name=gms-mysql -p 3306:3306 --net gms-network --ip 172.18.0.4 --restart=always -e MYSQL_ROOT_PASSWORD=123456  -v /gms-files/data/mysql:/var/lib/mysql  -d  gms-mysql:8.0.18

nginx创建：
docker run -it --name=gms-nginx --privileged=true -p 8888:80 -d  gms-nginx:1.17.9

gms-business创建：
docker run -it --name=gms-business --privileged=true --restart=always --net gms-network --ip 172.18.0.5 -p  8080:8080 -v /gms-files/business-service:/app  -d gms-business:latest

gms-map创建：
docker build -f /gms-files/map-service/Dockerfile -t gms-map:latest .
docker run -it --name=gms-map --restart=always --privileged=true --net gms-network --ip 172.18.0.7 -v /gms-files/map-service:/app -d gms-map:latest

gms-dispatch创建：
docker build -f /gms-files/dispatch-service/Dockerfile -t gms-dispatch:latest .
docker run -it --name=gms-dispatch --restart=always --privileged=true --net gms-network --ip 172.18.0.6 -v /gms-files/dispatch-service:/app -d gms-dispatch:latest /app/GmsDispatchServer

gms-communication创建：
docker build -f /gms-files/communication-service/Dockerfile -t gms-communication:latest .
docker run -it --name=gms-communication --privileged=true --net gms-network --ip 172.18.0.8 -v  /gms-files/communication-service:/app  -d  gms-communication:latest /app/VehicleCtrUdp

gms-web创建：
docker run -it --name=gms-web --privileged=true --net gms-network --ip 172.18.0.10 -v  /gms-files/web-service:/app  -p 8001:8001 -p 8002:8002  -d  gms-web:latest
修改服务配置ip：
/gms-files/web-service/dist/gms-debug/assets/serve.json
使用/gms-files/web-service/nginx.conf(容器内的/app/nginx.conf)替换容器内部的/etc/nginx/nginx.conf文件
>---------------------------------------------------

redis数据迁移：
https://www.cnblogs.com/huangyanqi/p/10983789.html
通过aof方式：
将文件拷贝到主机：
docker cp 57981ed5b296:/data/appendonly.aof appendonly.aof
通过scp命令将文件传到另一个虚拟机：
scp appendonly.aof root@192.168.2.132:/data/redis
重启redis服务
docker restart 57981ed5b296


<---------------------------------------------------
>---------------------------------------------------
mysql数据迁移：
在源宿主机上执行命令，导出容器数据：
docker exec -it 3b798a495286 mysqldump -uroot -p123456  --default-character-set=utf8 -A > mysql.sql
将导出的mysql.sql文件放到新mysql容器,执行文件导入:
进入mysql容器执行：mysql -uroot -123456;source mysql.sql所在全路径

可以设置忽略表导出：
./mysqldump -u root -p esb_console_db_dev > /home/mysql/esb_console_db_dev.sql --ignore-table=esb_console_db_dev.ESB_INSTANCE --ignore-table=esb_console_db_dev.ESB_INSTANCE_DETAIL 
--opt:默认只导出数据
-d:只导出结构
-t:只导出数据
-B d1 d2 指定导出多个数据库
-A 导出所有数据库
--default-character-set=utf8  指定导出编码类型
--tables  指定导出表名
--database 指定数据库名
--ignore-table  指定忽略表，可以使用多次

mysql查看字符集：
show variables like "%char%";
<---------------------------------------------------

导出镜像时指定tag，不然导入的镜像名和tag都为none：
正确：docker save <repository>:<tag> -o <repository>.tar
如果docker载入新的镜像后repository和tag名称都为none
那么通过tag的方法增加名字标签
docker tag <IMAGE ID> <repository>:<tag>

挂在目录查看：
docker inspect c95dc9714519 |grep Mounts -A 20

***********************************************************************************************************************************************************




20200422-gms部署-遇到的问题：
1、rabbitmq容器 脚本启动的时候 容器不断的重启， 删除 -v 的挂载docker命令之后 容器正常启动
2、business服务启动之后报mysql连接错误需要先行导入数据
3、map服务和business服务在执行完脚本之后不断的重启，执行完脚本之后，rabbitmq后台查看业务层与地图的队列没有被创建