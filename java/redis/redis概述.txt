1.为什么使用redis
  解决应用服务器的cpu和内存压力
  减少io的读操作，减轻io的压力
  关系型数据库扩展性不强，难以改变表的结构
  
2.有点：
  nosql数据库没有关联关系，数据结构简单，扩展表容易
  nosql读取速度快，对较大数据处理快
  
3.适用场景
  数据高并发的读写
  海量数据的读写
  对扩展性要求高的数据
 
4.不适用场景
  需要事务支持
  基于sql结构化查询存储，关系复杂
  
5.redis结构
  redis是一个开源的key-value数据库，支持string,list,set,zset,hash类型数据，对这些数据的操作都是原子性的，redis为了保证效率会定期持久化数据
  
6.使用场景
  配合关系型数据库做高速缓存
  缓存高频次访问的数据，降低数据库io
  分布式架构，做session共享
  可以持久化特定数据
  利用zset类型可以存储排行榜
  利用list的自然时间排序存储最新的n个数据
  
7.redis基本知识
  端口：6379
  默认16个数据库，下标从0开始
  单线程：redis是单线程+io多路复用：检查文件描述的就绪状态
  Memchached：多线程+锁
  
8.redis命令和数据类型
  通用：keys *，exists key,del key,expire key second(设置过期时间),ttl key(查看多少秒过期),move key db,dbsize
  string类型：是二进制安全的，可以包含任何数据源，最大512m
  string操作命令：
  get key,set key,append key,strlen key,incr,decr,incrby/decrby key(将key中的数字增减),setnx key value(当键不存在时设置key值)
  string批处理：
  mset，mget，msetnx，getrange，setrange，setx key second value(设置键值的同时，给定过期时间),getset key value(以旧换新，设置新的值同时得到旧值)
  
  list：链表，单键多值，redis列表是简单的字符串列表，从左或者从右插入，底层是双向链表，对两端的操作性能很高，通过下标查询性能很低
  list操作命令：
  lpush/rpush key value1 value2,lpop/rpop key1 key2,rpoplpush,lrange,lindex,llen,linsert
  
  set：类似list的无序集合，保证列表中不会有重复数据，底层是一个value为null的hash表
  set操作命令：
  sadd,smembers,sismember,scard,srem,spop,smove,sinter,sunion
  
  hash：键值对集合，类似map<String,object>
  hash操作命令：
  hset,hget,hmset,hexists,hkeys,hvals
  hset person age 23  给键为person的age字段赋值为23
  
  zset：与set集合非常类似，每个成员都关联了score，可以用来排序
  zset操作命令：
  zadd,zrange,zrem,zcount,zcord,zrank,zreveangebyscore,zrangebyscore
  
9.redis持久化
  两种方式：rdb(redis database)和aof(append of file)
  rdb:在指定时间间隔内，将内存中的数据作为一个快照文件(snapshot)写入到磁盘中，读取的时候也是直接读取snapshot文件到内存中，比aof高效，但是最后一次快照可能会丢失
  rdb持久化过程：redis单独创建(fork)一个进程来持久化，会先将数据写入临时文件中，待上次持久化结束后，会将该临时文件替换上次持久化文件，出于效率考虑，主进程和子进程公用一段物理内存，当发生改变时，才会把主进程“写时”复制一份给子进程。
  
  rdb保存策略：900s 1file change,300s 10file change,60s 10000file change
  
  aof：已日志形式记录每个写操作，启动时通过日志恢复操作，默认不开启aof，进入redis.conf找到appendonly yes打开，同步频率：每秒记录一次，如果宕机该秒记录可能失效
  rewrite：因为日志是追加方式，文件会越来越大，当超过设置的阈值时，日志文件会压缩，保留仅可以恢复的日志
  
  rdb和aof哪个好：官方推荐都使用，对数据不敏感，单独使用rdb，不建议单独使用aof，若作为纯缓存使用，可以都不开启
  
  aof的优缺点：
  优点：备份机制更加稳健，可读的日志文件，通过aof恢复更加稳健，可以处理失误
  缺点：比rdb更占磁盘，备份速度较慢，每次都要同步日志，有性能压力
  
  rdb的优缺点：
  优点：节省磁盘空间，恢复速度快
  缺点：数据太大时，比较消耗性能，一段时间保存一次快照，宕机时最后一次可能没有保存
  
10.redis事务
  输入multi，输入的命令都会依次进入到队列中，但不会执行，直到输入exec，redis才会将之前队列中命令依次执行，通过discard可以放弃组队
  主要作用：序列化操作，串联多个命令防止别的命令插队
  
  悲观锁：每次拿到数据的时候都会上锁，或者等待别人处理完数据再去拿锁。
  乐观锁：每次拿数据的时候总认为别人不会修改数据，所以不会上锁。但是跟新的时候会去判断别人有没有修改数据，使用版本号机制，乐观锁适用于多读的应用类型，可以提高吞吐量
  
  redis使用乐观锁：redis就是利用check-and-set机制实现事务，有三大特性：
  单独的隔离操作：事务中所有命令都会序列化，按顺序执行，不会被其他客服端打断
  没有隔离级别的概念：队列中的命令没有提交前不会被执行，事务外不能查看事务内的跟新
  不能保证原子性：跳过错误，一次执行，没有回滚
  
11.redis订阅、发布
  是进程中的一种消息通信模式

12.redis主从复制
  主从复制就是主机数据更新后根据配置和策略，自动同步到备份机的master、slaver机制，master写为主，slave读为主
  用处：读写分离，性能扩展；容灾快速恢复
  
13.集群分布
  实现对redis的水平扩展，启动n个redis节点，将整个数据分布在这n个节点中。
  配置conf文件和cluster文件
  
  

  
  