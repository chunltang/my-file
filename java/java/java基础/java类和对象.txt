java类与对象

    类在加载时优先加载静态变量，静态块(都只在类装载时执行一次)，然后是普通变量，不论变量放在那，都会先于任意一个方法执行，包括构造方法，执行顺序：静态块,静态属性(初始化顺序决定于在代码中顺序)->非静态块，属性(初始化顺序决定于在代码中顺序)->构造器
	
	使用new 和反射机制都可以创建类
	
	
	类属性：使用static声明的属性，只开辟一个内存，所有对象共享，不论在哪调用，值保持一致
	
	方法的重载：指在同一个类中，具有相同方法名，不同参数列表的方法之间的一种机制
	
	重写：重写是在继承中存在的，子类继承父类的方法，方法名相同，参数页相同的一种机制
	
	
	
	不定参数的方法：public void fun(String ...value){}  使用value[]数组的形式获取参数
	
	
	
抽象类与接口

    抽象类里可以有抽象方法和具体方法，而接口里必须是抽象方法
	
	包含抽象方法的类都是抽象类，抽象类里可以没有抽象方法，但有抽象方法的类都是抽象类
	
	继承抽象类时必须重写抽象方法，抽象类只能被继承，不能实列化。加了final关键字的类保证不能被继承
	
	当我们实现某个接口时，必须重写其所有方法
	
	
	接口可以实现向上转型，多个具有共同属性的类可以将他们的共同点提取出来，做成抽象，这样层次分明，同一管理
	
	接口不具有任何实现，最适合做基类
	
	接口中可以定义内部类，适合创建公共代码，供所有实现了该接口的类使用
	
  区别：
	
	抽象类是类，可以有实体方法
	
	抽象类不能实现多继承，而接口可以
	
	如果需要创建不带任何方法定义和成员的基类，则使用接口，如果类中需要有部分具体的实现，则使用抽象类
	
	如果事先想要将某类设计为一个基类，那么首选接口
	

	
内部类：

    每个内部类都能独立的继承一个实现，外部类的继承不影响内部类的继承，内部类使得多重继承的解决方案变得完整。
	
	静态的内部类和非静态的内部类在创建对象时有区别
	
	内部类可以访问外部类私有的成员变量
	
	内部类持有外部类的引用，可以使用static定义，使他们断开关系
	

匿名内部类：

    只能创建匿名类的一个实列，一个匿名内部类一定是在new的后面，用其隐含实现一个接口或实现一个类
	
	匿名内部类为局部内部类，所以局部内部类的所有限制都对其生效
	
	匿名类不能有构造方法，不能定义任何静态成员、方法和类
	
	
	
继承：

    子类不能继承父类私有的域或者方法，可以将private改为protected，protected的权限控制在包内
	