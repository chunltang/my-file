1.数学运算
使用内置数学运算函数，需要引入头文件<cmath>

2.I/O
使用格式化输出,<iomanip>
  setw(10)
  
3.字符串操作
c++有大量的函数来操作以null结尾的字符串,<cstring>
  strcpy(s1,s2) 复制s2到s1
  stract(s1,s2) 连接s2到s1末尾
  strlen(len)   
  strcmp(s1,s2) 比较大小，s1<s2返回值小于0
  strchr(s1,ch) 返回一个指针，指向s1中字符ch的第一次出现的位置
  strstr(s1,s2) 返回一个指针，指向s1中s2的第一次出现的位置
  
  c++中string类类型，<string>
  
4.时间操作
  c++继承了c语言用于日期和时间操作的结构和函数，<ctime>
  四个与时间相关的类型：clock_t,time_t,size_t,tm
  结构类型tm把日期和时间以C结构的形式保存
    #include <iostream>
	#include <ctime>
	using namespace std;
	int main(){
	  time_t now=time(0);
	  cout << "当前时间now: "<< now << endl;//时间戳
	  char *dt=ctime(&now);
	  cout << "本地日期时间: " << dt << endl;//地址
	  tm *gmtm=gmtime(&now);
	  dt=asctime(gmtm);
	  cout << "UTC 日期和时间： " << dt << endl;
	}
	
	#include <iostream>
	#include <ctime>
	using namespace std;
	int main(){
	  time_t now=time(0);
	  tm *ltm=localtime(&now);
	  cout << "年：" << 1900+ltm->tm_year <<endl;
	  cout << "月：" << 1+ltm->tm_mon << endl;
	  cout << "日：" << ltm->tm_mday << endl;
	  cout << "时间：" << ltm->tm_hour << ":" << ltm->tm_min << ":" << ltm->tm_sec <<endl; 
	}

5.I/O库头文件，<iostream>,<iomanip>,<fstream>
  <iostream>定义了cin,cout,cerr,clog对象
  <iomanip>该文件通过所谓的参数化的流操纵器，比如setw和setprecision，来声明对执行标准化I/O有用的服务
  <fstream>该文件为用户控制的文件处理声明服务
    #include <iostream>
	using namespace std;
	int main(){
	 char name[50];
	 cout << "请输入您的名称：";
	 cin >> name;
	 cout << "您的名称是：" << name << endl;
	}
	
6.结构的使用
	#include <iostream>
	#include <cstring>
	using namespace std;
	struct Books
	{
	  char title[50];
	  char author[50];
	  char subject[100];
	  int bookid;
	};
	int main()
	{
	  Books book1;
	  strcpy(book1.title,"c++教程");
	  strcpy(book1.author,"Runoob");
	  strcpy(book1.subject,"编程语言");
	  book1.bookid=123;
	  cout << book1.title <<"," <<book1.bookid <<endl;
	  return 0;
	}
	
  指向结构指针的使用
    #include <iostream>
	#include <cstring>
	using namespace std;
	void printBook(struct Books *book);
	struct Books
	{
	  char title[50];
	  char author[50];
	  char subject[100];
	  int bookid;
	};

	int main()
	{
	  Books book1;
	  strcpy(book1.title,"c++教程");
	  strcpy(book1.author,"Runoob");
	  strcpy(book1.subject,"编程语言");
	  book1.bookid=123;
	  printBook(&book1);
	  cout << book1.title <<"," <<book1.bookid <<endl;
	  return 0;
	}

	void printBook(struct Books *book)  //变量指向的是地址保存的值，而指针指向的是变量的地址，而这个地址对应的是变量的实际值
	{
	  cout << "书标题：" << book->title <<endl;
	}
	
7.类继承
	#include <iostream>
	using namespace std;
	class Shape
	{
	  public:
		void setWidth(int w)
		{
		  width=w;
		}

		void setHeight(int h)
		{ 
		  height=h;
		}
	  protected:
	   int width;
	   int height;
	};

	class Rectangle:public Shape
	{
	  public:
		int getArea()
		{
		  return (width*height);
		}
	};

	int main(void)
	{
	  Rectangle rect;
	  rect.setWidth(5);
	  rect.setHeight(7);
	  cout << "total area:" << rect.getArea() << endl;
	  return 0;
	}

8文件操作
  使用ftream标准库，定义了三个新的数据类型，ofstream,ifstream,fstream
  ofstream:写操作,表示输出文件流，用于创建文件并向文件写入信息
  ifstream:读操作
  fstream：该数据类型通常表示文件流，且同时具有ofstream和ifstream的功能
  要在c++中处理文件，必须在包含头文件<iostream>,<fstream>
  打开文件：open(const *filename,ios::mode),5种打开模式，可以多种模式结合使用:
  ios::app,住家模式
  ios::ate,文件打开后定位到文件末尾
  ios::in,打开文件用于读取
  ios::out,打开文件用于写入
  ios::trunc,如果文件已存在，其内容将打开文件之前被截断，即把文件长度设为0
  关闭文件：close()当c++程序终止时，它会自动关闭刷新所有流，释放所有分配的内存，并关闭所有打开的文件
  写入文件：使用流插入运算符(<<)向文件写入信息
  文件位置指针：
  istream和ostream都提供了用于重新定位文件位置指针的函数，关于istream的seekg和ostream的seekp函数，第一个参数都是长整形，第二个参数用于指定查找方向
  查找方向可以是ios::beg(默认的，从流开始位置),ios::cur(从流当前位置),ios::end
  文件位置指针是一个整数型，指定了从文件起始位置到指针所在位置的字节数
  读写操作：
	#include <iostream>
	#include <fstream>
	using namespace std;
	int main(){
	  char data[100];
	  ofstream outf;
	  outf.open("afile.dat");
	  cout << "Writing to zhe file" << endl;
	  cout << "Enter your name:";
	  cin.getline(data,100);
	  outf << data <<endl;

	  cout << "Enter oyur age:";
	  cin >> data;
	  cin.ignore();
	  outf << data <<endl;
	  outf.close();

	  ifstream inf;
	  inf.open("afile.dat");
	  cout << "Reading from the file " <<endl;
	  inf >> data;
	  cout << data << endl;
	  inf.close();
	  return 0;
	}

9.异常处理
  c++提供了一系列标准的异常，定义在<exception>中，std::expection是所有标准的c++异常的父类
  抛出异常实列：
	#include <iostream>
	using namespace std;
	double division(int a,int b){
	  if(b==0){
		throw "Division by zero condition!";
	  }
	  return (a/b);
	}
	int main(){
	  int x=50;
	  int y=0;
	  double z=0;
	  try{
		z=division(x,y);
	   cout << z << endl;
	  }catch(const char *msg){
		cerr <<msg <<endl;
	  }
	  return 0;
	}
  自定义异常：
	#include <iostream>
	#include <exception>
	using namespace std;
	struct MyException : public exception{
	  const char * what() const throw(){
		return "c++ Exception";
	  }
	}
	int main(){
	  try{
		throw MyException();
	  }catch(Myexception& e){
		std::cout << "MyException caught" << std::endl;
		std::cout << e.what() << std::endl;
	  }catch(std::exception& e){
		std::cout << "其他异常" << std::endl;
	  }
	}
	
10.动态分配内存
	#include <iostream>
	using namespace std;
	int main(){
	  double* val=NULL;
	  val = new double();
	  *val=1234;
	  cout << "value of val:" << *val <<endl;
	  cout << "addr of val :" << val << endl;
	  delete val;
	  return 0;
	}
	
  对象动态分配内存：
	#include <iostream>
	using namespace std;
	class Box{
	  public:
	   Box(){
		 cout << "调用构造函数" << endl;
	   }
	   ~Box(){
		 cout << "调用析构函数" << endl;
	   }
	};
	int main(){
	  Box* myBoxArray=new Box[4];
	  delete [] myBoxArray;
	  return 0;
	}
	
  三维数组动态分配内存：
    #include <iostream>
	using namespace std;
	int main(){
	  int i,j,k;
	  int ***p;//p[2][3][4]
	  p=new int **[2];
	  for(i=0;i<2;i++){
		p[i]=new int *[3];
		for(j=0;j<3;j++){
		  p[i][j]=new int[4];
		}
	  }
	  for(i=0;i<2;i++){
		for(j=0;j<3;j++){
		  for(k=0;k<4;k++){
			p[i][j][k]=i+j+k;
			cout << p[i][j][k] << " ";
		  }
		  cout << endl;
		}
		cout << endl;
	  }
	  for(i=0;i<2;i++){
		for(j=0;j<3;j++){
		  delete [] p[i][j];
		}
	  }
	  for(i=0;i<2;i++){
		delete [] p[i];
	  }
	  delete [] p;  
	  return 0;
	}
	
	
11.模板
  类模板：
	#include <iostream>
	#include <vector>
	#include <cstdlib>
	#include <string>
	#include <stdexcept>
	using namespace std;

	template <class T> class Stack{
	  private:
		vector<T> elems;
	  public:
		void push(T const&);
		void pop();
		T top() const;
		bool empty() const{
		  return elems.empty();
		}
	};
	template <class T> void Stack<T>::push(T const& elem){
	  elems.push_back(elem);
	}
	template <class T> void  Stack<T>::pop(){
	  if(elems.empty()){
		throw out_of_range("Stack<>::top():empty stack");
	  }
	  elems.pop_back();
	}
	template <class T> T Stack<T>::top () const {
	  if(elems.empty()){
		throw out_of_range("Stack<>::top():empty stack");
	  }
	  return elems.back();
	}
	int main(){
	  try{
		 Stack<int> intstack;
		 Stack<string> strstack;
		 intstack.push(7);
		 cout << intstack.top() << endl;
		 strstack.push("Hello");
		 cout << strstack.top() << std::endl;
		 strstack.pop();
		 strstack.pop();
	  }catch(exception const& ex){
		 cerr << "Exception:" << ex.what() << endl;
		 return -1;
	  }
	}
	
	
12.c++预处理器
  预处理器是一些指令，指示编译器在实际编译之前所需要完成的预处理
  所有的预处理器指令都是井号(#)开头，只有空格字符可以出现在预处理指令之前，预处理不是c++语句，所以他们不会已分号结尾
  #include：用于把头文件包含到源文件中
  #define：用于创建符号常量，该符号常量通常称为宏，#deifne PI 3.14159，当这一行代码出现在一个文件中时，在该文件中后续出现的所有宏都会在程序编译之前被替换为这个定义的值
  参数宏：
  #define MIN(a,b)(a<b?a:b)
  条件编译：
  有几个指令可以用来有选择的对部分程序源代码进行编译，条件预处理器的结构与if选择结构很像
  #ifdef NULL
    #define NULL 0
  #endif
  可以使用#if 0 语句注释掉程序的一部分：
  #if 0
    不进行编译的代码
  #endif
  #和##运算符：
  #运算符把text令牌转换为用引号引起来的字符串：
  #define MKSTR(x) #x 
  cout << MKSTR(HELLO C++) << endl; c++预处理器把MKSTR(HELLO C++)替换为“HELLO C++”
  #define CONCAT(x,y) x ## y
  当CONCAT出现带程序中时，它的参数会被连接起来，并用来取代宏，列如程序中的CONCAT(HELLO,C++)会被替换为“HELLO C++”
  int xy=100;
  cout << concat(x,y);会转化为cout << xy;
  
  
13.信号处理
	#include <iostream>
	#include <csignal>
	#include <unistd.h>
	using namespace std;
	void signalHandler(int signum){
	  cout << "Interrupt signal (" << signum << ") received.\n";
	  //清理并关闭
	  //终止程序
	  exit(signum);
	}
	int main(){
	  signal(SIGINT，signalHandler);
	  while(1){
		cout << "Going to sleep..." << endl;
		sleep(1);
	  }
	  return 0;
	}
	
	
14.线程的使用
  简单线程：
	#include <iostream>
	#include <pthread.h>
	using namespace std;
	#define NUM_THREADS 5
	void* say_hello(void *args){
	  cout << "Hello Runoob!\n";
	  return 0;
	}

	int main(){
	  pthread_t tids[NUM_THREADS];
	  for(int i=0;i<NUM_THREADS;i++){
		int ret=pthread_create(&tids[i],NULL,say_hello,NULL);
		if(ret!=0){
		  cout << "pthread_create error:error code=" << ret<< endl;
		}
	  }
	  pthread_exit(NULL);等待所有线程结束
	}
  向线程函数传参：
	#include <iostream>
	#include <cstdlib>
	#include <pthread.h>

	using namespace std;
	#define NUM_THREADS 5
	void *printHello(void *threadid){
	  int tid=*((int*)threadid);
	  cout << "hello runoob! 线程ID，" << tid << endl;
	  pthread_exit(NULL);
	}

	int main(){
	  pthread_t threads[NUM_THREADS];
	  int indexes[NUM_THREADS];
	  int rc;
	  int i;
	  for(i=0;i<NUM_THREADS;i++){
		cout << "main:创建线程," << i << endl;
		indexes[i]=i;
		rc=pthread_create(&threads[i],NULL,printHello,(void*)&(indexes[i]));
		if(rc){
		  cout << "error :无法创建线程," << rc << endl;
		  exit(-1);
		}
	  }
	  pthread_exit(NULL);
	}
  线程连接：
	#include <iostream>
	#include <cstdlib>
	#include <pthread.h>
	#include <unistd.h>
	using namespace std;
	#define NUM_THREADS 5

	void *wait(void *t){
	  int i;
	  long tid;
	  tid=(long)t;
	  sleep(5);
	  cout << "sleep in thread " << endl;
	  cout << "thread with id :" << tid << "...exiting " << endl;
	  pthread_exit(NULL);
	}

	int main(){
	  int rc,i;
	  pthread_t threads[NUM_THREADS];
	  pthread_attr_t attr;
	  void *status;
	  pthread_attr_init(&attr);
	  pthread_attr_setdetachstate(&attr,PTHREAD_CREATE_JOINABLE);
	  for(i=0;i<NUM_THREADS;i++){
		cout <<"main() :creating thread," << i << endl;
		rc=pthread_create(&threads[i],NULL,wait,(void*)&i);
		if(rc){
		  cout << "error:unable to create thread," << rc << endl;
		  exit(-1);
		}
	  }
	  pthread_attr_destroy(&attr);
	  for(i=0;i<NUM_THREADS;i++){
		rc=pthread_join(threads[i],&status);
		if(rc){
		  cout << "error:unable to join," << rc << endl;
		  exit(-1);
		}
		cout << "main:completed threadid:" << i;
		cout<< "exiting with status:" << status << endl;
	  }
	  cout << "main:program exiting." << endl;
	  pthread_exit(NULL);
	}

	
15.容器
  

  vector的使用：
  vector的两个属性：szie,capacity，对应的设置方法分别是resize()和reserve()
  size()返回当前容器的真实占用大小
  capacity()是指发生realloc前能允许的最大元素数，即预分配的内存空间，可能容器内还没有真实数据
	#include <iostream>
	#include <vector>
	using namespace std;

	int main(){
	  vector<int> vec;
	  int i;
	  cout <<"vector size=" << vec.size() << endl;//初始化大小为0
	  for(i=0;i<5;i++){
		vec.push_back(i);//vec.push_back(i)在向量末尾插入值，若果有必要会扩展向量的大小
	  }
	  cout << "extended vector size=" << vec.size() << endl;
	  for(i=0;i<5;i++){
		cout << "value of vec [" << i << "]=" << vec[i] << endl;
	  }
	  vector<int>::iterator v=vec.begin();//数据保存在连续的空间，vec.begin()返回一个指向向量开头的迭代器
	  while(v!=vec.end()){//vec.end()返回一个指向向量结尾的迭代器
		cout <<  "value of v=" << *v << endl;
		v++;
	  }
	  return 0;
	}